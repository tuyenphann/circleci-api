version: 2.1

orbs:
  slack: circleci/slack@4.9.3

executors:
  node14:
    docker:
      - image: circleci/node:14
    working_directory: ~/project

commands:
  pull-migrate:
    description: "Pull and migrate"
    parameters:
      git-username:
        type: string
        default: tuyenphann
      git-email:
        type: string
        default: tuyenphan@kms-technology.com
      target-branch:
        type: enum
        enum: [local/test1, local/test2]
        default: local/test1
      source-branch:
        type: enum
        enum: [main, local/test1, local/test2]
        default: main
      env:
        type: enum
        enum: [test1, test2]
        default: test1
    steps:
      - run:
          name: Pull
          command: |
            echo "ðŸ”¥ Configuring Git"
            git config user.name "<< parameters.git-username >>"
            git config user.email "<< parameters.git-email >>"
            git config pull.rebase false
            
            echo "ðŸ”¥ Checking out to << parameters.target-branch >>"
            git checkout << parameters.target-branch >>
            echo 'export DEPLOYED_BRANCH="<< parameters.target-branch >>"' >> $BASH_ENV

            echo 'export ENV="<< parameters.env >>"' >> $BASH_ENV

            UPSTREAM=origin/<< parameters.source-branch >>
            LOCAL=$(git rev-parse @)
            REMOTE=$(git rev-parse "$UPSTREAM")
            BASE=$(git merge-base @ "$UPSTREAM")

            MIGRATION_CHANGES=$(git diff --name-only "$UPSTREAM" << parameters.target-branch >> -- ./functions/db/migrations)
            echo "export MIGRATIONS=${MIGRATION_CHANGES}" >> $BASH_ENV

            if [ $LOCAL = $REMOTE ]; then
              echo "ðŸ”¥ << parameters.target-branch >> branch is up-to-date as compared with << parameters.source-branch >> branch"
            elif [ $REMOTE = $BASE ]; then
              echo "ðŸ”¥ << parameters.target-branch >> branch is ahead of << parameters.source-branch >> branch"
            else
              echo "ðŸ”¥ Pulling from << parameters.source-branch >>"
              git pull --no-edit origin << parameters.source-branch >>

              if [[ -z "${CHANGES}" ]]
              then
                echo 'export CHANGES="    ðŸ”¥   << parameters.source-branch >>"' >> $BASH_ENV
              else
                echo 'export CHANGES="${CHANGES}\n    ðŸ”¥   << parameters.source-branch >>"' >> $BASH_ENV
              fi
            fi
      - run:
          name: Configure gcloud CLI and SQL Auth proxy
          command: |
            if [[ -z "${MIGRATIONS}" ]]
            then
              echo "ðŸ”¥ No migration changes from << parameters.source-branch >> branch"
              exit 0
            fi

            echo "ðŸ”¥ Configuring Cloud SQL Auth proxy"
            wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
            chmod +x cloud_sql_proxy
      - run:
          name: Launch Cloud SQL Auth proxy
          background: true
          command: |
            if [[ -z "${MIGRATIONS}" ]]
            then
              echo "ðŸ”¥ No migration changes from << parameters.source-branch >> branch"
              exit 0
            fi

            echo "ðŸ”¥ Launching Cloud SQL Auth proxy"
            ./cloud_sql_proxy -instances=circle-ci-api-demo:us-central1:circleci-dev=tcp:5432 -credential_file=./functions/circle-ci-api-demo-4d44b40dcc35.json
      - run:
          name: Migrate
          command: |
            if [[ -z "${MIGRATIONS}" ]]
            then
              echo "ðŸ”¥ No migration changes from << parameters.source-branch >> branch"
              echo 'export MIGRATIONS="  â€¢  No migrations"' >> $BASH_ENV
              exit 0
            fi

            echo "ðŸ”¥ Installing Knex"
            cd ./functions
            npm install knex

            echo "ðŸ”¥ Migrating changes from << parameters.source-branch >> branch"
            npm run knex -- migrate:latest

            cd ~/project/
  push:
    description: "Push"
    parameters:
      git-username:
        type: string
        default: tuyenphann
      git-email:
        type: string
        default: tuyenphan@kms-technology.com
      target-branch:
        type: enum
        enum: [local/test1, local/test2]
        default: local/test1
    steps:
      - run:
          name: Push
          command: |
            if [[ -z "${CHANGES}" ]]
            then
              echo "ðŸ”¥ No changes"
              exit 0
            fi

            echo "ðŸ”¥ Configuring Git"
            git config user.name "<< parameters.git-username >>"
            git config user.email "<< parameters.git-email >>"
            git config pull.rebase false

            echo "ðŸ”¥ Pushing to << parameters.target-branch >>"
            git push
  build-deploy:
    description: "Build and deploy"
    parameters:
      env:
        type: enum
        enum: [test1, test2]
        default: test1
    steps:
      - run:
          name: Build
          command: |
            if [[ -z "${CHANGES}" ]]
            then
              echo "ðŸ”¥ No changes"
              exit 0
            fi

            echo "ðŸ”¥ Installing dependencies"
            cd ./functions
            npm install

            echo "ðŸ”¥ Configuring environment variables"
            cp -a ./envs/<< parameters.env >>/. ./

            echo "ðŸ”¥ Building project"
            npm run build
      - run:
          name: Deploy
          command: |
            if [[ -z "${CHANGES}" ]]
            then
              echo "ðŸ”¥ No changes"
              echo 'export CHANGES="  â€¢  No changes"' >> $BASH_ENV
              exit 0
            fi

            echo "ðŸ”¥ Installing gcloud CLI"
            cd ~/project/
            curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-398.0.0-linux-x86_64.tar.gz
            tar -xf google-cloud-cli-398.0.0-linux-x86_64.tar.gz
            ./google-cloud-sdk/install.sh --rc-path /home/circleci/.bashrc
            if [ -f '/home/circleci/project/google-cloud-sdk/path.bash.inc' ]; then . '/home/circleci/project/google-cloud-sdk/path.bash.inc'; fi
            if [ -f '/home/circleci/project/google-cloud-sdk/completion.bash.inc' ]; then . '/home/circleci/project/google-cloud-sdk/completion.bash.inc'; fi
            cd ./functions/

            echo "ðŸ”¥ Installing Firebase Tools"
            npm install --prefix=$HOME/.local --global firebase-tools

            echo "ðŸ”¥ Deploying Firebase"
            firebase use circle-ci-api-demo
            npm run deploy

            echo "ðŸ”¥ Deploying GCloud App Engine"
            gcloud auth activate-service-account --key-file=./circle-ci-api-demo-4d44b40dcc35.json
            gcloud --quiet config set project circle-ci-api-demo
            gcloud --quiet config set compute/zone us-central1-a
            gcloud app deploy --quiet --appyaml=./app.yml

            cd ~/project/
  notify-slack:
    description: "Notify Slack"
    steps:
      - slack/notify:
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":x: Build #$CIRCLE_BUILD_NUM of *$CIRCLE_PROJECT_REPONAME* is failed"
                  }
                }
              ],
              "attachments": [
                {
                  "color": "#FC100D",
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "Job <$CIRCLE_BUILD_URL|$CIRCLE_JOB> is triggered by $CIRCLE_PROJECT_USERNAME\nDeployed branch: `${DEPLOYED_BRANCH}`"
                      }
                    }
                  ]
                }
              ]
            }
          template: ${SLACK_SUCCESS_TEMPLATE}
      - slack/notify:
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":white_check_mark: Build #$CIRCLE_BUILD_NUM of *$CIRCLE_PROJECT_REPONAME* is successfully"
                  }
                }
              ],
              "attachments": [
                {
                  "color": "#4BB543",
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "Job <$CIRCLE_BUILD_URL|$CIRCLE_JOB> is triggered by $CIRCLE_PROJECT_USERNAME\nEnvironment: *${ENV}*\nDeployed branch: `${DEPLOYED_BRANCH}`"
                      }
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "Migrations:\n_    ðŸ”¥   ${MIGRATIONS}_"
                      }
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "Changes:\n*${CHANGES}*"
                      }
                    }
                  ]
                }
              ]
            }

jobs:
  deploy-test1:
    executor: node14
    description: "Merge and deploy test1"
    steps:
      - checkout
      - pull-migrate:
          target-branch: local/test1
          source-branch: main
      - push:
          target-branch: local/test1
      - build-deploy:
          env: test1
      - notify-slack
  deploy-test2:
    executor: node14
    description: "Merge test2"
    steps:
      - checkout
      - pull:
          target-branch: local/test2
          source-branch: main
      - pull:
          target-branch: local/test2
          source-branch: local/test1
      - push:
          target-branch: local/test2
      - build-deploy:
          env: test2
      - notify-slack

workflows:
  test1:
    jobs:
      - deploy-test1:
          context: slack-secrets
          filters:
            branches:
              only:
                - main